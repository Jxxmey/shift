
import dayjs from 'dayjs';
import { User } from '../models/User.js';
import { Schedule } from '../models/Schedule.js';
import { parseScheduleText, SHIFTS, expandMonthTitle } from './parser.js';
import { renderMonthSummary, renderTodayTomorrow } from './renderer.js';
import { chatWithOpenRouter } from '../openrouter/chat.js';

export async function ensureUser(userId) {
  const user = await User.findOneAndUpdate(
    { userId },
    {},
    { upsert: true, new: true }
  );
  return user;
}

export async function handleText(userId, text, event) {
  const t = text.trim();

  if (/^(start|help)$/i.test(t)) return helpMessages();
  if (/^‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\s*(on|off)?$/i.test(t)) {
    const m = t.match(/(on|off)/i);
    const notifyEnabled = !m || m[1].toLowerCase() === 'on';
    await User.updateOne({ userId }, { notifyEnabled });
    return { type: 'text', text: notifyEnabled ? '‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤ üêæ (‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô 20:00 ‡∏ô.)' : '‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ üí§' };
  }
  if (/^‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°$/i.test(t)) {
    const u = await User.findOne({ userId });
    return { type: 'text', text: `‡∏ó‡∏µ‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${u?.currentTeam || 'default'}\n‡∏™‡∏≤‡∏Ç‡∏≤: ${u?.currentBranch || 'main'}` };
  }
  if (/^‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏µ‡∏°\s+(.+)/i.test(t)) {
    const [, team] = t.match(/^‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏µ‡∏°\s+(.+)/i);
    await User.updateOne({ userId }, { currentTeam: team.trim() });
    return { type: 'text', text: `‡πÇ‡∏≠‡πÄ‡∏Ñ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡∏°‡πÄ‡∏õ‡πá‡∏ô "${team.trim()}" ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞ üêïü§ù` };
  }
  if (/^‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≤‡∏Ç‡∏≤\s+(.+)/i.test(t)) {
    const [, branch] = t.match(/^‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≤‡∏Ç‡∏≤\s+(.+)/i);
    await User.updateOne({ userId }, { currentBranch: branch.trim() });
    return { type: 'text', text: `‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡πÄ‡∏õ‡πá‡∏ô "${branch.trim()}" ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πâ‡∏≤‡∏ö üå∏` };
  }
  if (/^‡∏Å‡∏∞(‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ|‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ)$/i.test(t)) {
    return renderTodayTomorrow(userId, t.includes('‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ'));
  }
  if (/^‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô$/i.test(t)) {
    const now = dayjs();
    return renderMonthSummary(userId, now.month() + 1, now.year());
  }
  if (/^‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á\s+(.+)/i.test(t)) {
    const [, title] = t.match(/^‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á\s+(.+)/i);
    const { month, year } = expandMonthTitle(title);
    const u = await User.findOne({ userId });
    await Schedule.deleteOne({ userId, team: u?.currentTeam || 'default', branch: u?.currentBranch || 'main', month, year });
    return { type: 'text', text: `‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≠‡∏á ${title} ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏±‡∏ö üóëÔ∏è` };
  }

  const lines = t.split(/\n|\r/).map(s => s.trim()).filter(Boolean);
  if (lines.length >= 2) {
    try {
      const parsed = parseScheduleText(lines.join('\n'));
      const u = await User.findOne({ userId });
      await Schedule.findOneAndUpdate(
        { userId: userId, team: u?.currentTeam || 'default', branch: u?.currentBranch || 'main', month: parsed.month, year: parsed.year },
        { $set: { days: parsed.days, rawText: t, team: u?.currentTeam || 'default', branch: u?.currentBranch || 'main' } },
        { upsert: true }
      );
      return [
        { type: 'text', text: `‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≠‡∏á ${parsed.title} ‡πÅ‡∏•‡πâ‡∏ß‡∏Æ‡∏±‡∏ö! üê∂‚úÖ (‡∏ó‡∏µ‡∏°: ${u?.currentTeam || 'default'} / ‡∏™‡∏≤‡∏Ç‡∏≤: ${u?.currentBranch || 'main'})` },
        await renderMonthSummary(userId, parsed.month, parsed.year)
      ];
    } catch (e) {
      return { type: 'text', text: `‡∏á‡∏∑‡∏≠‡∏≠ ‡∏≠‡πà‡∏≤‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á ‡∏•‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö:\n\nSeptember 2025\nX\t11\t11\t4\t2 ... (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 1 ‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)\n\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${e.message}` };
    }
  }

  try {
    const reply = await chatWithOpenRouter(t, event.source?.userId);
    return { type: 'text', text: reply };
  } catch (e) {
    return { type: 'text', text: '‡πÄ‡∏°‡∏µ‡πä‡∏¢‡∏ß‡∏ß ‡πÄ‡∏≠‡πâ‡∏¢ ‡πÄ‡∏´‡πà‡∏≤‡πÜ üêï ‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡∏¥‡∏î OpenRouter ‡πÉ‡∏´‡πâ‡∏ä‡∏¥‡∏ö‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡πâ‡∏≤~' };
  }
}

function helpMessages() {
  const commands = [
    '‚Ä¢ Start ‚Äì ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î üßæ',
    '‚Ä¢ ‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‚Äì ‡∏ß‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:\n  September 2025\n  X 11 11 4 2 12 ...',
    '‚Ä¢ ‡∏Å‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ / ‡∏Å‡∏∞‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ ‚Äì ‡∏î‡∏π‡∏Å‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ/‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ ‚è∞',
    '‚Ä¢ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô ‚Äì ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô üìÖ',
    '‚Ä¢ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô on|off ‚Äì ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô 20:00 ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ üîî',
    '‚Ä¢ ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á <Month Year> ‚Äì ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô üóëÔ∏è',
    '‚Ä¢ ‡∏ï‡∏±‡πâ‡∏á‡∏ó‡∏µ‡∏° <‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°> ‚Äì ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ó‡∏µ‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô üë•',
    '‚Ä¢ ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≤‡∏Ç‡∏≤ <‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤> ‚Äì ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô üè¢',
    '‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏° ‚Äì ‡∏î‡∏π‡∏ó‡∏µ‡∏°/‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà üìå'
  ].join('\n');

  const legend = Object.entries(SHIFTS)
    .map(([k, v]) => `${k} ‚Üí ${v.label}${v.start ? ` (${v.start}-${v.end})` : ''}`)
    .join('\n');

  return [
    { type: 'text', text: `‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ‡∏Æ‡∏±‡∏ö! ‡∏ú‡∏°‡∏ä‡∏¥‡∏ö‡∏∞‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏∞‡∏á‡∏≤‡∏ô üêïüç°\n\n‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:\n${commands}` },
    { type: 'text', text: `‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏∞‡∏á‡∏≤‡∏ô:\n${legend}` },
  ];
}
