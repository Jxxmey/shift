import { lineClient, lineMiddleware } from './client.js';
import { ensureUser, handleText } from '../logic/handler.js';

export { lineMiddleware };

export async function handleLineWebhook(req, res) {
  try {
    const events = Array.isArray(req.body?.events) ? req.body.events : [];
    if (!events.length) {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö 200 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ LINE ‡∏£‡∏µ‡∏ó‡∏£‡∏≤‡∏¢
      return res.status(200).json({ ok: true, events: 0 });
    }

    const results = await Promise.all(
      events.map(async (event) => {
        try {
          const replyToken = event.replyToken; // ‡∏ö‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ replyToken
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ userId
          if (event?.source?.userId) {
            await ensureUser(event.source.userId);
          }

          if (event.type === 'follow' || event.type === 'memberJoined') {
            if (replyToken) return reply(replyToken, welcomeMessage());
            return null;
          }

          if (event.type === 'message' && event.message?.type === 'text') {
            const txt = event.message.text ?? '';
            const messages = await handleText(event.source?.userId, txt, event);
            if (replyToken) return reply(replyToken, messages);
            return null;
          }

          // ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏µ‡πÄ‡∏ß‡∏ô‡∏ï‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
          return null;
        } catch (e) {
          console.error('webhook per-event error', e);
          // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏Å‡∏•‡∏±‡∏ö ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ replyToken
          if (event?.replyToken) {
            try {
              await reply(event.replyToken, [
                { type: 'text', text: '‡∏≠‡∏∏‡πã‡∏á.. ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏™‡∏∞‡∏î‡∏∏‡∏î‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö üê∂üí¶' },
              ]);
            } catch (e2) {
              console.error('reply fallback failed', e2);
            }
          }
          return null;
        }
      })
    );

    // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏ï‡∏≠‡∏ö 200 ‡πÄ‡∏™‡∏°‡∏≠
    return res.status(200).json(results);
  } catch (e) {
    console.error('webhook top-level error', e);
    // ‡∏ï‡∏≠‡∏ö 200 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏±‡∏ô retry ‡∏•‡∏π‡∏õ ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡∏≤‡∏°‡πÅ‡∏Å‡πâ root cause ‡∏à‡∏≤‡∏Å log
    return res.status(200).json({ ok: true });
  }
}

function reply(replyToken, messages) {
  const arr = Array.isArray(messages) ? messages : [messages];
  return lineClient.replyMessage(replyToken, arr);
}

function welcomeMessage() {
  return [
    { type: 'text', text: '‡πÇ‡∏Æ‡πà‡∏ß~ ‡∏ä‡∏¥‡∏ö‡∏∞‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏∞‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! üêï‚ú®\n‡∏û‡∏¥‡∏°‡∏û‡πå Start ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢' },
  ];
}
