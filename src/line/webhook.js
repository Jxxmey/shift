
import { lineClient, lineMiddleware } from './client.js';
import { ensureUser, handleText } from '../logic/handler.js';

export { lineMiddleware };

export async function handleLineWebhook(req, res) {
  const events = req.body.events || [];
  const results = await Promise.all(
    events.map(async (event) => {
      try {
        if (event.type === 'follow' || event.type === 'memberJoined') {
          await ensureUser(event.source.userId);
          return reply(event.replyToken, welcomeMessage());
        }
        if (event.type === 'message' && event.message.type === 'text') {
          await ensureUser(event.source.userId);
          const messages = await handleText(event.source.userId, event.message.text, event);
          return reply(event.replyToken, messages);
        }
        return Promise.resolve(null);
      } catch (e) {
        console.error('webhook error', e);
        return reply(event.replyToken, [{ type: 'text', text: '‡∏≠‡∏∏‡πã‡∏á.. ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏™‡∏∞‡∏î‡∏∏‡∏î‡∏ô‡∏¥‡∏î‡∏ô‡∏∂‡∏á ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö üê∂üí¶' }]);
      }
    })
  );
  res.json(results);
}

function reply(replyToken, messages) {
  const arr = Array.isArray(messages) ? messages : [messages];
  return lineClient.replyMessage(replyToken, arr);
}

function welcomeMessage() {
  return [
    { type: 'text', text: '‡πÇ‡∏Æ‡πà‡∏ß~ ‡∏ä‡∏¥‡∏ö‡∏∞‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏∞‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö! üêï‚ú®\n‡∏û‡∏¥‡∏°‡∏û‡πå Start ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢' },
  ];
}
